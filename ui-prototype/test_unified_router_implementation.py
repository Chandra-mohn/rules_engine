#!/usr/bin/env python3
"""
Test and validation script for the unified router implementation.
Validates all fixes: compilation, security, React-style data flow, single path execution.
"""

import sys
import tempfile
import subprocess
from pathlib import Path
from backend.services.unified_router_generator import UnifiedRouterGenerator, RuleMapping, ClientSpec


def test_compilation_fixes():
    """Test that generated code has proper Java structure and compiles."""
    print("üîß Testing Compilation Fixes...")

    generator = UnifiedRouterGenerator()

    # Create test rule mapping
    rule_mapping = RuleMapping(
        transaction_code="CREDIT_APP",
        rule_id="rule-001",
        rule_name="credit_approval",
        rule_type="rule",
        dependencies=[]
    )

    client_spec = ClientSpec(
        client_id="TEST_BANK",
        rule_mappings=[rule_mapping]
    )

    # Generate code
    artifacts = generator.generate_client_router(client_spec)

    # Validate compilation structure
    for path, code in artifacts.items():
        print(f"  Checking {path}...")

        # ‚úÖ Check: No import statements inside methods
        lines = code.split('\n')
        in_method = False
        for i, line in enumerate(lines):
            if 'public ' in line and '(' in line and '{' in line:
                in_method = True
            elif line.strip() == '}' and in_method:
                in_method = False
            elif in_method and line.strip().startswith('import '):
                raise AssertionError(f"‚ùå Import inside method at line {i+1}: {line}")

        # ‚úÖ Check: No class definitions inside methods
        in_method = False
        for i, line in enumerate(lines):
            if 'public ' in line and '(' in line and '{' in line:
                in_method = True
            elif line.strip() == '}' and in_method:
                in_method = False
            elif in_method and ('public class ' in line or 'private class ' in line):
                raise AssertionError(f"‚ùå Class inside method at line {i+1}: {line}")

        # ‚úÖ Check: Proper package declaration
        if not any(line.strip().startswith('package ') for line in lines):
            raise AssertionError(f"‚ùå Missing package declaration in {path}")

        # ‚úÖ Check: Proper imports at top level
        import_section = True
        for line in lines:
            if line.strip().startswith('public class '):
                import_section = False
            elif not import_section and line.strip().startswith('import '):
                raise AssertionError(f"‚ùå Import not in import section: {line}")

    print("‚úÖ Compilation structure: PASSED")
    return True


def test_security_fixes():
    """Test that security vulnerabilities are fixed."""
    print("üõ°Ô∏è Testing Security Fixes...")

    generator = UnifiedRouterGenerator()

    rule_mapping = RuleMapping(
        transaction_code="SECURITY_TEST",
        rule_id="rule-sec",
        rule_name="security_test",
        rule_type="rule",
        dependencies=[]
    )

    client_spec = ClientSpec(
        client_id="SECURE_BANK",
        rule_mappings=[rule_mapping]
    )

    artifacts = generator.generate_client_router(client_spec)

    for path, code in artifacts.items():
        # ‚úÖ Check: No unbounded global caches
        assert "static final Map<String, Object> contextState = new HashMap<>()" not in code, \
            "‚ùå Found unbounded global cache"

        # ‚úÖ Check: Bounded cache with size limit
        if "ruleCache" in code:
            assert "MAX_CACHE_SIZE" in code, "‚ùå Cache without size limit"
            assert "ruleCache.size() >= MAX_CACHE_SIZE" in code, "‚ùå No cache size management"

        # ‚úÖ Check: Input validation present
        if "RuleExecutor" in code and "executors" in path:
            assert "validateInputs" in code, "‚ùå Missing input validation"
            assert "creditScore < 300 || creditScore > 850" in code, "‚ùå Missing credit score validation"
            assert "income < 0" in code, "‚ùå Missing income validation"

        # ‚úÖ Check: No dangerous patterns
        assert "System.getProperty" not in code, "‚ùå Potential system property access"
        assert "Runtime.getRuntime()" not in code, "‚ùå Potential command execution"
        assert "reflection" not in code.lower(), "‚ùå Reflection usage detected"

    print("‚úÖ Security hardening: PASSED")
    return True


def test_react_style_data_flow():
    """Test React-style data flow implementation."""
    print("‚öõÔ∏è Testing React-Style Data Flow...")

    generator = UnifiedRouterGenerator()

    rule_mapping = RuleMapping(
        transaction_code="REACT_TEST",
        rule_id="rule-react",
        rule_name="react_style_test",
        rule_type="rule",
        dependencies=[]
    )

    client_spec = ClientSpec(
        client_id="REACT_BANK",
        rule_mappings=[rule_mapping]
    )

    artifacts = generator.generate_client_router(client_spec)

    # Find the executor code
    executor_code = None
    for path, code in artifacts.items():
        if "Executor.java" in path and "executors" in path:
            executor_code = code
            break

    assert executor_code is not None, "‚ùå Executor code not found"

    # ‚úÖ Check: RuleExecutionContext usage (React Context pattern)
    assert "RuleExecutionContext ruleContext = new RuleExecutionContext(context)" in executor_code, \
        "‚ùå Missing React-style context creation"

    # ‚úÖ Check: Data flows down through method parameters
    assert "processRule(ruleContext)" in executor_code, \
        "‚ùå Missing data flow to child methods"

    # ‚úÖ Check: Context-scoped state management
    assert "ruleContext.setRuleData" in executor_code, \
        "‚ùå Missing context-scoped state management"
    assert "ruleContext.getRuleData" in executor_code, \
        "‚ùå Missing context-scoped state access"

    # ‚úÖ Check: Immutable updates (React pattern)
    assert ".withStatus(" in executor_code, \
        "‚ùå Missing immutable update pattern"
    assert ".withExtended(" in executor_code, \
        "‚ùå Missing immutable extended field updates"

    # ‚úÖ Check: No global static state (anti-React pattern)
    assert "private static Map<String, Object> globalState" not in executor_code, \
        "‚ùå Found anti-React global state pattern"

    print("‚úÖ React-style data flow: PASSED")
    return True


def test_single_path_simplification():
    """Test that hot/cold path complexity is removed."""
    print("üöÄ Testing Single Path Simplification...")

    generator = UnifiedRouterGenerator()

    rule_mapping = RuleMapping(
        transaction_code="SIMPLE_TEST",
        rule_id="rule-simple",
        rule_name="simple_test",
        rule_type="rule",
        dependencies=[]
    )

    client_spec = ClientSpec(
        client_id="SIMPLE_BANK",
        rule_mappings=[rule_mapping]
    )

    artifacts = generator.generate_client_router(client_spec)

    for path, code in artifacts.items():
        # ‚úÖ Check: No hot/cold path routing
        assert "HOT_EXECUTORS" not in code, "‚ùå Found hot path complexity"
        assert "COLD_EXECUTORS" not in code, "‚ùå Found cold path complexity"
        assert "executeHotPath" not in code, "‚ùå Found hot path method"
        assert "executeColdPath" not in code, "‚ùå Found cold path method"

        # ‚úÖ Check: Single unified execution path
        if "Router.java" in path:
            assert "EXECUTORS = Map.of(" in code, "‚ùå Missing unified executor map"
            assert "Unified executor map (single path" in code, "‚ùå Missing single path comment"

        # ‚úÖ Check: No frequency-based optimization complexity
        assert "execution_frequency" not in code, "‚ùå Found frequency complexity"
        assert "estimated_steps" not in code, "‚ùå Found step estimation complexity"
        assert "hot_path_threshold" not in code, "‚ùå Found threshold complexity"

    print("‚úÖ Single path simplification: PASSED")
    return True


def test_performance_characteristics():
    """Test that performance optimizations are maintained."""
    print("‚ö° Testing Performance Characteristics...")

    generator = UnifiedRouterGenerator()

    rule_mapping = RuleMapping(
        transaction_code="PERF_TEST",
        rule_id="rule-perf",
        rule_name="performance_test",
        rule_type="rule",
        dependencies=[]
    )

    client_spec = ClientSpec(
        client_id="PERF_BANK",
        rule_mappings=[rule_mapping]
    )

    artifacts = generator.generate_client_router(client_spec)

    for path, code in artifacts.items():
        # ‚úÖ Check: Performance timing
        if "Executor.java" in path and "executors" in path:
            assert "System.nanoTime()" in code, "‚ùå Missing performance timing"

        # ‚úÖ Check: Efficient static maps
        if "Router.java" in path:
            assert "Map.of(" in code, "‚ùå Missing efficient static map"

        # ‚úÖ Check: Branch optimization (most common cases first)
        if "Executor.java" in path and "executors" in path:
            lines = code.split('\n')
            credit_checks = [i for i, line in enumerate(lines) if "creditScore >=" in line]
            if len(credit_checks) >= 2:
                # First condition should be higher credit score (common case first)
                first_score = int([s for s in lines[credit_checks[0]].split() if s.isdigit()][0])
                second_score = int([s for s in lines[credit_checks[1]].split() if s.isdigit()][0])
                assert first_score >= second_score, "‚ùå Credit checks not optimized for common cases"

        # ‚úÖ Check: No performance anti-patterns
        assert "synchronized" not in code, "‚ùå Found synchronization overhead"
        assert "Thread.sleep" not in code, "‚ùå Found blocking operations"

    print("‚úÖ Performance characteristics: PASSED")
    return True


def test_business_logic_completeness():
    """Test that business logic is complete and realistic."""
    print("üíº Testing Business Logic Completeness...")

    generator = UnifiedRouterGenerator()

    rule_mapping = RuleMapping(
        transaction_code="BUSINESS_TEST",
        rule_id="rule-business",
        rule_name="business_test",
        rule_type="rule",
        dependencies=[]
    )

    client_spec = ClientSpec(
        client_id="BUSINESS_BANK",
        rule_mappings=[rule_mapping]
    )

    artifacts = generator.generate_client_router(client_spec)

    # Find executor code
    executor_code = None
    for path, code in artifacts.items():
        if "Executor.java" in path and "executors" in path:
            executor_code = code
            break

    assert executor_code is not None, "‚ùå Executor code not found"

    # ‚úÖ Check: Complete business rules
    business_elements = [
        "creditScore",
        "income",
        "APPROVED",
        "REJECTED",
        "CONDITIONAL",
        "creditLimit",
        "apr"
    ]

    for element in business_elements:
        assert element in executor_code, f"‚ùå Missing business element: {element}"

    # ‚úÖ Check: Realistic credit decisions
    assert "750" in executor_code, "‚ùå Missing premium credit tier"
    assert "650" in executor_code, "‚ùå Missing standard credit tier"
    assert "calculateCreditLimit" in executor_code, "‚ùå Missing credit limit calculation"
    assert "calculateAPR" in executor_code, "‚ùå Missing APR calculation"

    # ‚úÖ Check: Proper decision flow
    assert "PREMIUM" in executor_code, "‚ùå Missing premium tier"
    assert "STANDARD" in executor_code, "‚ùå Missing standard tier"

    print("‚úÖ Business logic completeness: PASSED")
    return True


def test_java_syntax_validation():
    """Validate Java syntax correctness."""
    print("‚òï Testing Java Syntax Validation...")

    generator = UnifiedRouterGenerator()

    rule_mapping = RuleMapping(
        transaction_code="SYNTAX_TEST",
        rule_id="rule-syntax",
        rule_name="syntax_test",
        rule_type="rule",
        dependencies=[]
    )

    client_spec = ClientSpec(
        client_id="SYNTAX_BANK",
        rule_mappings=[rule_mapping]
    )

    artifacts = generator.generate_client_router(client_spec)

    for path, code in artifacts.items():
        # ‚úÖ Check: Balanced braces
        open_braces = code.count('{')
        close_braces = code.count('}')
        assert open_braces == close_braces, f"‚ùå Unbalanced braces in {path}"

        # ‚úÖ Check: Balanced parentheses
        open_parens = code.count('(')
        close_parens = code.count(')')
        assert open_parens == close_parens, f"‚ùå Unbalanced parentheses in {path}"

        # ‚úÖ Check: Proper method signatures
        lines = code.split('\n')
        for i, line in enumerate(lines):
            if 'public ' in line and '(' in line and ')' in line and '{' in line:
                # Single-line method signature with opening brace - this is valid
                continue
            elif 'public ' in line and '(' in line and ')' in line:
                # Check that method signature ends with { or ;
                if not (line.strip().endswith('{') or line.strip().endswith(';')):
                    # Look at next line for opening brace
                    if i + 1 < len(lines) and not lines[i + 1].strip().startswith('{'):
                        raise AssertionError(f"‚ùå Malformed method signature at line {i+1}: {line}")

    print("‚úÖ Java syntax validation: PASSED")
    return True


def main():
    """Run all tests and report results."""
    print("üß™ Starting Unified Router Implementation Tests\n")

    tests = [
        test_compilation_fixes,
        test_security_fixes,
        test_react_style_data_flow,
        test_single_path_simplification,
        test_performance_characteristics,
        test_business_logic_completeness,
        test_java_syntax_validation
    ]

    passed = 0
    failed = 0

    for test in tests:
        try:
            if test():
                passed += 1
            else:
                failed += 1
        except Exception as e:
            print(f"‚ùå {test.__name__}: FAILED - {e}")
            failed += 1
        print()

    print("üìä Test Results:")
    print(f"‚úÖ Passed: {passed}")
    print(f"‚ùå Failed: {failed}")
    print(f"üìà Success Rate: {passed/(passed+failed)*100:.1f}%")

    if failed == 0:
        print("\nüéâ ALL TESTS PASSED - Unified Router Implementation Complete!")
        print("üöÄ Ready for production deployment with:")
        print("   ‚úÖ Compilation errors fixed")
        print("   ‚úÖ Security vulnerabilities resolved")
        print("   ‚úÖ React-style data flow implemented")
        print("   ‚úÖ Single execution path simplified")
        print("   ‚úÖ Performance characteristics maintained")
        return 0
    else:
        print(f"\n‚ö†Ô∏è {failed} tests failed - Review implementation")
        return 1


if __name__ == "__main__":
    exit(main())