package com.rules;

import java.util.*;
import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.LocalDateTime;

/**
 * RecourseMerchant
 * Generated from DSL rule definition
 *
 * @generated template_code_generator.py v1.0.0
 * @complexity 4/10
 * @performance warm
 * @timestamp 2025-10-14T19:23:32Z
 */
public class RecoursemerchantRule {

    // ════════════════════════════════════════════════════════════════
    // Result Container
    // Generated by: standard_rule_template.py (identical across all rules)
    // ════════════════════════════════════════════════════════════════

    public static class RuleResult {
        private final boolean matched;
        private final List<String> actions;
        private final String finalAction;

        public RuleResult(boolean matched, List<String> actions, String finalAction) {
            this.matched = matched;
            this.actions = actions;
            this.finalAction = finalAction;
        }

        public boolean isMatched() { return matched; }
        public List<String> getActions() { return actions; }
        public String getFinalAction() { return finalAction; }
    }

    // ════════════════════════════════════════════════════════════════
    // Main Evaluation Logic
    // Generated by: template_code_generator.py::generate_code()
    // Template: standard_rule_template.py::generate_standard_rule()
    // ════════════════════════════════════════════════════════════════

    public static RuleResult evaluate(Map<String, Object> context) {
        // Initialization
        List<String> actions = new ArrayList<>();
        String finalAction = null;
        boolean matched = false;

        // Entity extraction (from DSL entities: RecourseMerchantIdentifier, recourseCode, trnmRecourseFlag, trnmRecourseMerchant)
        Map<String, Object> RecourseMerchantIdentifier = (Map<String, Object>) context.get("RecourseMerchantIdentifier");
        Map<String, Object> recourseCode = (Map<String, Object>) context.get("recourseCode");
        Map<String, Object> trnmRecourseFlag = (Map<String, Object>) context.get("trnmRecourseFlag");
        Map<String, Object> trnmRecourseMerchant = (Map<String, Object>) context.get("trnmRecourseMerchant");

        // Rule logic
        matched = true;
            actions.add("getServiceDomain(" + "\"Fullfilcreditcard\"" + ")");
        
        matched = true;
            actions.add("reportLog(" + "\"editRecourseFlag\"" + ", " + "\"recourseCode\"" + ")");
        
        matched = true;
            actions.add("reportLog(" + "\"editRecourseMrch\"" + ", " + "\"RecourseMerchantIdentifier\"" + ")");
        
        if ((!_equals(_getFieldValue(context, "trnmRecourseFlag"), _getFieldValue(context, "recourseCode"))) || (!_equals(_getFieldValue(context, "trnmRecourseMerchant"), _getFieldValue(context, "RecourseMerchantIdentifier")))) {
            matched = true;
            actions.add("reportLog(" + "\"nonMonChangedMe\"" + ", " + "\"Y\"" + ")");
            actions.add("updateServiceDomain(" + "\"recourceCode\"" + ", " + "\"trnmRecourseFlag\"" + ")");
            actions.add("reportLog(" + "\"edit2RecourceFlag\"" + ", " + "\"trnmRecourseFlag\"" + ")");
            actions.add("updateServiceDomain(" + "\"recourseMerchantIdentifier\"" + ", " + "\"trnmRecourseMerchant\"" + ")");
            actions.add("reportLog(" + "\"edit2RecourseMerc\"" + ", " + "\"trnmRecourseMerchant\"" + ")");
        }

        return new RuleResult(matched, actions, finalAction);
    }

    // ════════════════════════════════════════════════════════════════
    // Standard Helper Methods (identical across all generated rules)
    // Template: standard_rule_template.py::get_helper_methods()
    // ════════════════════════════════════════════════════════════════

    // Helper method: Get field value with null safety
    private static Object _getFieldValue(Map<String, Object> entity, String fieldName) {
        return entity != null ? entity.get(fieldName) : null;
    }

    // Helper method: Null-safe equality comparison
    private static boolean _equals(Object a, Object b) {
        if (a == null && b == null) return true;
        if (a == null || b == null) return false;
        return a.toString().equals(b.toString());
    }

    // Helper method: Type-safe numeric comparison
    private static int _compareTo(Object a, Object b) {
        if (a == null || b == null) return 0;
        try {
            if (a instanceof Number && b instanceof Number) {
                return Double.compare(((Number)a).doubleValue(), ((Number)b).doubleValue());
            }
            return a.toString().compareTo(b.toString());
        } catch (Exception e) {
            return 0;
        }
    }

    // Helper method: Null-safe numeric conversion
    private static double _toNumber(Object obj) {
        if (obj == null) return 0.0;
        if (obj instanceof Number) return ((Number)obj).doubleValue();
        try {
            return Double.parseDouble(obj.toString());
        } catch (NumberFormatException e) {
            return 0.0;
        }
    }
}
